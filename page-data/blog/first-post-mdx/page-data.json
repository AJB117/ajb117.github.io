{"componentChunkName":"component---src-templates-blog-template-js","path":"/blog/first-post-mdx","result":{"data":{"mdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"slug\": \"/blog/first-post-mdx\",\n  \"date\": \"2021-05-21\",\n  \"title\": \"First post - MDX\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"This is my blog. It's quite small now, but I hope to grow it in the future.\"), mdx(\"p\", null, \"I started this website a couple of months ago when I had more time, but I decided to finally\\nmake some progress on it by writing an actual post. Whereas I only had a basic home page and some sample\\npages before, I want to start adding articles on topics of my interest.\"), mdx(\"p\", null, \"This post will be a bit shorter, but I just thought to give an update on a quick change I've made to the blog.\\nBefore, I was using plain old Markdown for blog posts using\\n\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.gatsbyjs.com/plugins/gatsby-transformer-remark/\"\n  }), \" \", mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"gatsby-transformer-remark\"), \" \"), \" to parse the Markdown files\\nI place in my \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"pages\"), \" folder. But then I realized that if I wanted to do anything more complicated than present\\ntext, images, and tables, I would need something more powerful. Specifically, I'm hoping to integrate some\\nJavascript-driven features to blog posts (e.g. visualization, brief interactive demos, in-browser inference, etc.)\\nin the future, and all of that would be made much easier if I could just insert React components whenever I needed.\"), mdx(\"p\", null, \"After some browsing, I found \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://mdxjs.com/\"\n  }), \"MDX\"), \". As the name suggests, it lets you write JSX within Markdown, allowing\\nfor better interactivity within Markdown posts. To show it off, here's a cute todo \\\"app\\\" within this post's Markdown content:\"), mdx(\"center\", null, mdx(TodoApp, {\n    mdxType: \"TodoApp\"\n  })), mdx(\"p\", null, \"I thought this was pretty neat. I can imagine putting more complicated functionality into blog posts.\"), mdx(\"h2\", null, \"Using MDX with Gatsby\"), mdx(\"p\", null, \"The process for integrating MDX into Gatsby was not as clean as using plain Markdown. There were a couple of things that needed\\ntweaking:\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Adjusting GraphQL queries to fetch MDX instead of Markdown.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Plugins: using \", mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://www.gatsbyjs.com/plugins/gatsby-plugin-mdx/\"\n  }), mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"gatsby-plugin-mdx\")), \" was straightforward enough, but getting math to show up wasn't as clear.\")), mdx(\"p\", null, \"Part 1 was very simple. Save for some minor tweaks, it was enough to inspect GraphiQL and look at some of the examples\\nfrom the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"gatsby-plugin-mdx\"), \" docs. Part 2, however, took a bit more work. The MDX docs don't have much guidance\\nfor using MDX with Gatsby (but there is a section for Next.js), and it seemed like some other people were having\\nsimilar issues getting math to show up. Eventually, I settled on the following:\"), mdx(\"center\", null, mdx(\"img\", {\n    src: mdxPng,\n    width: \"70%\"\n  })), mdx(\"p\", null, \"I couldn't get \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"remark-html-katex\"), \" working, but I found that \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"rehype-katex\"), \" did. I just put it in the\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"rehypePlugins\"), \" for \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"gatsby-plugin-mdx\"), \". I also forgot to import\\nthe katex stylesheet (\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"katex/dist/katex.min.css\"), \") in my blog post template, which resulted in\\nthe raw LaTeX appearing with some un-styled text.\\nBut now I can write math in my MDX!\"));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"date":"May 21, 2021","slug":"/blog/first-post-mdx","title":"First post - MDX"}}},"pageContext":{"slug":"/blog/first-post-mdx"}},"staticQueryHashes":[]}